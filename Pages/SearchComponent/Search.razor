@page "/search"
@namespace BlazorApp.Pages.SearchComponent
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory ClientFactory


@if (getBranchesError)
{
  <p>Unable to get branches from GitHub. Please try again later.</p>
}
else
{
  <input placeholder="Search" @bind-value="searchTerm" @bind-value:event="oninput" />
  <ul>
    @foreach (var branch in FilteredBranches)
    {
      <li>@branch.Name</li>
    }
  </ul>
}

@code {
  private IEnumerable<GitHubBranch> branches = Array.Empty<GitHubBranch>();
  private string searchTerm;
  private bool getBranchesError;
  private bool shouldRender;
  protected override bool ShouldRender() => shouldRender;
  protected override async Task OnInitializedAsync()
  {
    var request = new HttpRequestMessage(HttpMethod.Get, "https://api.github.com/repos/dotnet/AspNetCore.Docs/branches");
    request.Headers.Add("Accept", "application/vnd.github.v3+json");
    request.Headers.Add("User-Agent", "HttpClientFactory-Sample");
    var client = ClientFactory.CreateClient();
    var response = await client.SendAsync(request);
    if (response.IsSuccessStatusCode)
    {
      using var responseStream = await response.Content.ReadAsStreamAsync();
      branches = await JsonSerializer.DeserializeAsync<IEnumerable<GitHubBranch>>(responseStream);
    }
    else
    {
      getBranchesError = true;
    }
    shouldRender = true;
  }
  IEnumerable<GitHubBranch> FilteredBranches => branches.Where((branch) =>
  {
    if (searchTerm == null) return true;
    return branch.Name.ToLower().Contains(searchTerm.ToLower());
  });


  public class GitHubBranch
  {
    [JsonPropertyName("name")]
    public string Name { get; set; }
  }
}